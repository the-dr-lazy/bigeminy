// module Data.Monoid.Multiplicative, generated by purescript-tsd-gen 0.3.0.0
import * as Data_Bounded from "../Data.Bounded";
import * as Data_Eq from "../Data.Eq";
import * as Data_Monoid from "../Data.Monoid";
import * as Data_Ord from "../Data.Ord";
import * as Data_Semigroup from "../Data.Semigroup";
import * as Data_Semiring from "../Data.Semiring";
import * as Data_Show from "../Data.Show";
export type /*newtype*/ Multiplicative<a> = a;
export const /*newtype data ctor*/ Multiplicative: <a>(_: a) => Multiplicative< a >;
export const /*instance*/ eqMultiplicative: <a>(_: Data_Eq.Eq< a >) => Data_Eq.Eq< Multiplicative< a > >;
export const /*instance*/ eq1Multiplicative: any /* TypeApp (SourceSpan {spanName = "", spanStart = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}, spanEnd = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}},[]) (TypeConstructor (SourceSpan {spanName = "", spanStart = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}, spanEnd = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}},[]) (Qualified (Just (ModuleName [ProperName {runProperName = "Data"},ProperName {runProperName = "Eq"}])) (ProperName {runProperName = "Eq1"}))) (TypeConstructor (SourceSpan {spanName = ".spago/prelude/v4.1.1/src/Data/Monoid/Multiplicative.purs", spanStart = SourcePos {sourcePosLine = 17, sourcePosColumn = 42}, spanEnd = SourcePos {sourcePosLine = 17, sourcePosColumn = 56}},[]) (Qualified (Just (ModuleName [ProperName {runProperName = "Data"},ProperName {runProperName = "Monoid"},ProperName {runProperName = "Multiplicative"}])) (ProperName {runProperName = "Multiplicative"}))) */;
export const /*instance*/ ordMultiplicative: <a>(_: Data_Ord.Ord< a >) => Data_Ord.Ord< Multiplicative< a > >;
export const /*instance*/ ord1Multiplicative: any /* TypeApp (SourceSpan {spanName = "", spanStart = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}, spanEnd = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}},[]) (TypeConstructor (SourceSpan {spanName = "", spanStart = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}, spanEnd = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}},[]) (Qualified (Just (ModuleName [ProperName {runProperName = "Data"},ProperName {runProperName = "Ord"}])) (ProperName {runProperName = "Ord1"}))) (TypeConstructor (SourceSpan {spanName = ".spago/prelude/v4.1.1/src/Data/Monoid/Multiplicative.purs", spanStart = SourcePos {sourcePosLine = 20, sourcePosColumn = 44}, spanEnd = SourcePos {sourcePosLine = 20, sourcePosColumn = 58}},[]) (Qualified (Just (ModuleName [ProperName {runProperName = "Data"},ProperName {runProperName = "Monoid"},ProperName {runProperName = "Multiplicative"}])) (ProperName {runProperName = "Multiplicative"}))) */;
export const /*instance*/ boundedMultiplicative: <a>(_: Data_Bounded.Bounded< a >) => Data_Bounded.Bounded< Multiplicative< a > >;
export const /*instance*/ showMultiplicative: <a>(_: Data_Show.Show< a >) => Data_Show.Show< Multiplicative< a > >;
export const /*instance*/ functorMultiplicative: any /* TypeApp (SourceSpan {spanName = "", spanStart = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}, spanEnd = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}},[]) (TypeConstructor (SourceSpan {spanName = "", spanStart = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}, spanEnd = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}},[]) (Qualified (Just (ModuleName [ProperName {runProperName = "Data"},ProperName {runProperName = "Functor"}])) (ProperName {runProperName = "Functor"}))) (TypeConstructor (SourceSpan {spanName = ".spago/prelude/v4.1.1/src/Data/Monoid/Multiplicative.purs", spanStart = SourcePos {sourcePosLine = 27, sourcePosColumn = 50}, spanEnd = SourcePos {sourcePosLine = 27, sourcePosColumn = 64}},[]) (Qualified (Just (ModuleName [ProperName {runProperName = "Data"},ProperName {runProperName = "Monoid"},ProperName {runProperName = "Multiplicative"}])) (ProperName {runProperName = "Multiplicative"}))) */;
export const /*instance*/ applyMultiplicative: any /* TypeApp (SourceSpan {spanName = "", spanStart = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}, spanEnd = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}},[]) (TypeConstructor (SourceSpan {spanName = "", spanStart = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}, spanEnd = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}},[]) (Qualified (Just (ModuleName [ProperName {runProperName = "Control"},ProperName {runProperName = "Apply"}])) (ProperName {runProperName = "Apply"}))) (TypeConstructor (SourceSpan {spanName = ".spago/prelude/v4.1.1/src/Data/Monoid/Multiplicative.purs", spanStart = SourcePos {sourcePosLine = 29, sourcePosColumn = 39}, spanEnd = SourcePos {sourcePosLine = 29, sourcePosColumn = 53}},[]) (Qualified (Just (ModuleName [ProperName {runProperName = "Data"},ProperName {runProperName = "Monoid"},ProperName {runProperName = "Multiplicative"}])) (ProperName {runProperName = "Multiplicative"}))) */;
export const /*instance*/ applicativeMultiplicative: any /* TypeApp (SourceSpan {spanName = "", spanStart = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}, spanEnd = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}},[]) (TypeConstructor (SourceSpan {spanName = "", spanStart = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}, spanEnd = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}},[]) (Qualified (Just (ModuleName [ProperName {runProperName = "Control"},ProperName {runProperName = "Applicative"}])) (ProperName {runProperName = "Applicative"}))) (TypeConstructor (SourceSpan {spanName = ".spago/prelude/v4.1.1/src/Data/Monoid/Multiplicative.purs", spanStart = SourcePos {sourcePosLine = 32, sourcePosColumn = 51}, spanEnd = SourcePos {sourcePosLine = 32, sourcePosColumn = 65}},[]) (Qualified (Just (ModuleName [ProperName {runProperName = "Data"},ProperName {runProperName = "Monoid"},ProperName {runProperName = "Multiplicative"}])) (ProperName {runProperName = "Multiplicative"}))) */;
export const /*instance*/ bindMultiplicative: any /* TypeApp (SourceSpan {spanName = "", spanStart = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}, spanEnd = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}},[]) (TypeConstructor (SourceSpan {spanName = "", spanStart = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}, spanEnd = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}},[]) (Qualified (Just (ModuleName [ProperName {runProperName = "Control"},ProperName {runProperName = "Bind"}])) (ProperName {runProperName = "Bind"}))) (TypeConstructor (SourceSpan {spanName = ".spago/prelude/v4.1.1/src/Data/Monoid/Multiplicative.purs", spanStart = SourcePos {sourcePosLine = 35, sourcePosColumn = 37}, spanEnd = SourcePos {sourcePosLine = 35, sourcePosColumn = 51}},[]) (Qualified (Just (ModuleName [ProperName {runProperName = "Data"},ProperName {runProperName = "Monoid"},ProperName {runProperName = "Multiplicative"}])) (ProperName {runProperName = "Multiplicative"}))) */;
export const /*instance*/ monadMultiplicative: any /* TypeApp (SourceSpan {spanName = "", spanStart = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}, spanEnd = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}},[]) (TypeConstructor (SourceSpan {spanName = "", spanStart = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}, spanEnd = SourcePos {sourcePosLine = 0, sourcePosColumn = 0}},[]) (Qualified (Just (ModuleName [ProperName {runProperName = "Control"},ProperName {runProperName = "Monad"}])) (ProperName {runProperName = "Monad"}))) (TypeConstructor (SourceSpan {spanName = ".spago/prelude/v4.1.1/src/Data/Monoid/Multiplicative.purs", spanStart = SourcePos {sourcePosLine = 38, sourcePosColumn = 39}, spanEnd = SourcePos {sourcePosLine = 38, sourcePosColumn = 53}},[]) (Qualified (Just (ModuleName [ProperName {runProperName = "Data"},ProperName {runProperName = "Monoid"},ProperName {runProperName = "Multiplicative"}])) (ProperName {runProperName = "Multiplicative"}))) */;
export const /*instance*/ semigroupMultiplicative: <a>(_: Data_Semiring.Semiring< a >) => Data_Semigroup.Semigroup< Multiplicative< a > >;
export const /*instance*/ monoidMultiplicative: <a>(_: Data_Semiring.Semiring< a >) => Data_Monoid.Monoid< Multiplicative< a > >;
export {};
